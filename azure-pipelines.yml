# Build phenix source tarball

# no continuous integration builds or pull requests
trigger: none
pr: none

schedules:
  - cron: '0 1 * * *'
    displayName: Nightly source update
    branches:
      include:
      - main
    always: true

# template location
resources:
  repositories:
    - repository: cctbx_project
      type: github
      name: cctbx/cctbx_project
      endpoint: phenix-installer
  pipelines:
  - pipeline: data_cache
    source: 'Update data cache'

jobs:
- job: Build_phenix_source_tarball
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: 360

  # variables for version
  variables:
  - name: year
    value: $(Get-Date -Format yyyy)
  - name: month
    value: $(Get-Date -Format MM)
  - name: day
    value: $(Get-Date -Format dd)
  - name: version
    value: $(year).$(month).a$(day)
  - name: installer_name
    value: TBD
  # variable for Google Drive folder
  - name: folder_id
    value: 1m2p6k6UdF798vlH1D6eemvTqngj5Ei-q
  - name: qr_folder_id
    value: 1-fGBBQ1p6veUj33Yu1h3AsSIQgFlU8bT
  # variable for secrets
  - group: ENV_GROUP

  steps:

  - task: DownloadSecureFile@1
    name: upload_key
    inputs:
      secureFile: phenix-lbl-04e6cb0d1bf7.json

  - task: DownloadSecureFile@1
    name: ssh_config
    inputs:
      secureFile: ssh.config

  # download support scripts
  - checkout: self
    path: ./phenix-installer

  # clean up linux image
  - script: |
      sudo $(Pipeline.Workspace)/phenix-installer/scripts/clean_linux.sh
    displayName: Clean up linux image

  # ubuntu setup
  - script: |
      set -xe
      sudo apt-get update
      sudo apt-get install -y build-essential curl libgl1-mesa-dev libglu1-mesa-dev locales subversion
      sudo locale-gen en_US.UTF-8
      sudo update-locale
    displayName: Install dependencies for Ubuntu

  # set version
  - powershell: |
      $trimmed_month = $(month).TrimStart("0")
      $trimmed_day = $(day).TrimStart("0")
      Write-Host $trimmed_month
      Write-Host $trimmed_day
      Write-Host "##vso[task.setVariable variable=year]$(year)"
      Write-Host "##vso[task.setVariable variable=month]$trimmed_month"
      Write-Host "##vso[task.setVariable variable=day]$trimmed_day"
      Write-Host $(year)
      Write-Host $(month)
      Write-Host $(day)
    displayName: Set variables from date

  - script: |
      # version=$(year).$(month).a$(day)
      version=`python3 -c 'import time; print("dev-%s"%(int((time.time() - 1255046400) / (24*60*60))))'`
      # version=`python3 -c 'import time; print("1.21-%s"%(int((time.time() - 1255046400) / (24*60*60))))'`
      echo "##vso[task.setVariable variable=version]$version"
      echo $(version)
    displayName: Set version

  - script: |
      installer_name=phenix-installer-$(version)-source
      echo "##vso[task.setVariable variable=installer_name]$installer_name"
      echo $(installer_name)
    displayName: Set installer_name

  - script: |
      set -xe
      # release=`echo $(Build.SourceBranch) | sed 's/refs\/heads\/releases\///'`
      release=`python3 -c 'import time; print("1.21-%s"%(int((time.time() - 1255046400) / (24*60*60))))'`
      echo "##vso[task.setVariable variable=version]$release"
      echo $(version)
    displayName: Override version for release branch
    condition: startswith(variables['Build.SourceBranch'], 'refs/heads/releases/')

  # add conda to path
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda?view=azure-devops&tabs=ubuntu-16-04#add-conda-to-your-system-path
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  # update conda
  - script: |
      set -xe
      conda update -n base -y conda
      conda update -n base -y --all
    displayName: Update conda
    retryCountOnTaskFailure: 3

  # link bootstrap.py
  - script: |
      set -xe
      cd $(Pipeline.Workspace)
      wget https://raw.githubusercontent.com/cctbx/cctbx_project/master/libtbx/auto_build/bootstrap.py
      mkdir modules
    displayName: Download bootstrap.py

  # download test data
  - template: .azure-pipelines/templates/download-data-cache.yml@cctbx_project

  # clean up git-lfs hooks
  - script: |
      set -xe
      cd $(Pipeline.Workspace)
      rm -fr ./modules/*/.git/hooks/post-checkout
      rm -fr ./modules/*/.git/hooks/post-commit
      rm -fr ./modules/*/.git/hooks/post-merge
      rm -fr ./modules/*/.git/hooks/pre-push
    displayName: Clean up git-lfs hooks

  # download remaining sources
  - script: |
      set -xe
      export SVN_SSH="ssh -F $(ssh_config.secureFilePath)"
      cd $(Pipeline.Workspace)
      python bootstrap.py hot update \
        --builder=phenix_release \
        --use-conda \
        --python 39 \
        --cciuser=builder
    displayName: Download remaining sources

  - script: |
      set -xe

      for r in dials dxtbx xia2; do
        cd $(Pipeline.Workspace)/modules/${r}
        git checkout dials-3.13
      done

      cd $(Pipeline.Workspace)/modules/dials
      git config user.name "Do Not Merge"
      git config user.email "do_not@mer.ge"
      git revert --no-edit c51410c50f77045663aec9da21faa28689191c1a
      git apply $(Pipeline.Workspace)/phenix-installer/patches/dials.patch

      cd $(Pipeline.Workspace)/modules/dxtbx
      git apply $(Pipeline.Workspace)/phenix-installer/patches/dxtbx.patch

      cd $(Pipeline.Workspace)/modules/xia2
      git apply $(Pipeline.Workspace)/phenix-installer/patches/xia2.patch
    displayName: Switch to DIALS 3.13 and patch for Python 3.7

  # patch installer script
  - script: |
      set -xe
      cd $(Pipeline.Workspace)
      cp $(Pipeline.Workspace)/phenix-installer/patches/create_installer.py \
         ./modules/cctbx_project/libtbx/auto_build/create_installer.py
    displayName: Use patched create_installer.py

  # base and build
  - script: |
      set -xe
      cd $(Pipeline.Workspace)
      export CCTBX_SKIP_CHEMDATA_CACHE_REBUILD=1
      python bootstrap.py base build \
        --builder=phenix_release \
        --use-conda \
        --python 39 \
        --nproc=4
    displayName: Configure and Build

  # remove symoblic link for Windows
  - script: |
      set -xe
      cd $(Pipeline.Workspace)/modules/phenix/wxGUI2/images
      rm -f splash-refine.png
      cp splash-refine-1.3.png splash-refine.png
    displayName: Remove symoblic link to image

  # copy REST credentials
  - script: |
      set -xe

      installer_dir=/net/cci-filer2/raid1/auto_build/phenix_installers

      cd $(Pipeline.Workspace)
      mkdir -p rest
      cd rest
      scp -F $(ssh_config.secureFilePath) builder@boa.lbl.gov:${installer_dir}/rest/token .
      scp -F $(ssh_config.secureFilePath) builder@boa.lbl.gov:${installer_dir}/rest/url .

    displayName: Copy token and url

  # update version in Dockerfile
  - script: |
      set -xe
      cd $(Pipeline.Workspace)/modules/phenix
      sed -i 's/ARG PHENIX_VERSION.*/ARG PHENIX_VERSION=$(version)/' Dockerfile
    displayName: Update version in Dockerfile

  # build source tarball
  # build/bin/libtbx.create_installer --version $(version) --install_script modules/cctbx_project/libtbx/auto_build/plus_installer.py --dist_dir dist/$(version) tmp/cctbx-$(version)
  - script: |
      set -xe

      cd $(Pipeline.Workspace)
      build/bin/libtbx.create_installer \
        --version $(version) \
        --install_script modules/phenix/phenix/installer/phenix_voyager_installer.py \
        --license modules/phenix/LICENSE.txt --readme modules/phenix/CHANGES \
        --readme modules/phenix/phenix/installer/README \
        --readme modules/phenix/phenix/installer/SOURCES \
        --dist_dir dist/$(version) \
        tmp/$(installer_name)
      rm -fr build dist modules
      cd ./tmp
      cp -a $(Pipeline.Workspace)/rest $(installer_name)
      export XZ_OPT="-T4 -9"
      tar -Jcf $(installer_name).tar.xz $(installer_name)
      openssl enc \
        -aes-256-cbc \
        -salt \
        -md sha256 \
        -iter 100000 \
        -pbkdf2 \
        -in $(installer_name).tar.xz \
        -out phenix.enc \
        -pass env:TARBALL_PASSWORD
    displayName: Build source tarball

  # create folders for conda packages and installers
  - script: |
      set -xe
      if [ -d /usr/share/miniconda/envs/upload ]; then
        conda remove -n upload -y --all
      fi
      conda create -n upload -y -c conda-forge python=3.9 pydrive2 tabulate tqdm
      source activate upload
      conda install -y -c xfel -c conda-forge --no-deps --freeze-installed libboost libboost-python numpy cctbx.xfel
    displayName: Set up upload environment
    retryCountOnTaskFailure: 3

  - script: |
      set -xe
      source activate upload
      for d in 3.9 3.10 3.11 3.12 linux-64 osx-64 osx-arm64 win-64 noarch; do
        libtbx.python $(Pipeline.Workspace)/phenix-installer/scripts/upload_installer.py \
          --credentials $(upload_key.secureFilePath) \
          --folder_id $(folder_id) \
          --folder_list "$(version)/${d}"
        sleep 10
      done
      libtbx.python $(Pipeline.Workspace)/phenix-installer/scripts/upload_installer.py \
        --credentials $(upload_key.secureFilePath) \
        --folder_id $(qr_folder_id) \
        --folder_list "$(version)"
    displayName: Create folders for conda packages and installers
    retryCountOnTaskFailure: 3
    continueOnError: true

  # publish complete source tarball as artifact
  - publish: $(Pipeline.Workspace)/tmp/phenix.enc
    artifact: phenix
    continueOnError: true

  # upload full source tarball to Google Drive
  - script: |
      set -xe

      source activate upload

      libtbx.python $(Pipeline.Workspace)/phenix-installer/scripts/upload_installer.py \
        --credentials $(upload_key.secureFilePath) \
        --folder_id $(folder_id) \
        --folder_list $(version) \
        --files $(Pipeline.Workspace)/tmp/phenix-installer-$(version)-source.tar.xz
    displayName: Upload full source tarball (xz) to Google Drive
    continueOnError: true
